//upload document on button press
@IBAction func uploadDocument(_ sender: UIButton) {
        let importMenu = UIDocumentPickerViewController(documentTypes: [String(kUTTypePDF)], in: .import)
            importMenu.delegate = self
            importMenu.modalPresentationStyle = .formSheet
            self.present(importMenu, animated: true, completion: nil)
       // session.uploadTask(with: request, from: data)

    }
   // api calling via alamofire upload on selection of the file in file manager.
   //swagger documentation accepts only multipart form data in api and returns path of file uploaded in server
    public func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
        guard let myURL = urls.first else {
            return
        }
        var url =   URL(string: "https://api-uat.softsages.com/hr/document/upload/ownerId/e2cbe0fe31a2ff48ba7890ac23e23b8e")
        print("import result : \(myURL)")
        let fileName = myURL.lastPathComponent
        print("import result : \(fileName)")
        let boundary = UUID().uuidString
      var url =   URL(string: "https://api-uat.softsages.com/hr/document/upload/ownerId/e2cbe0fe31a2ff48ba7890ac23e23b8e")
      // api calling via alamofire upload    
func Doc(url: String, docData: Data?, parameters: [String : Any], onCompletion: ((JSON?) -> Void)? = nil, onError: ((Error?) -> Void)? = nil, fileName: String, token : String!){
    DispatchQueue.main.asyncAfter(deadline: .now() + 0.33){

        self.present(self.VC_loader, animated: false)
    }
     let headers: HTTPHeaders = [
         "Content-type": "multipart/form-data",
         "Token": "Bearer " + token
     ]

     print("Headers => \(headers)")

     print("Server Url => \(url)")

//  Alamofire.upload(multipartFormData: <#T##(MultipartFormData) -> Void#>, to: <#T##URLConvertible#>, encodingCompletion: <#T##((SessionManager.MultipartFormDataEncodingResult) -> Void)?##((SessionManager.MultipartFormDataEncodingResult) -> Void)?##(SessionManager.MultipartFormDataEncodingResult) -> Void#>)

     Alamofire.upload(multipartFormData: { (multipartFormData) in
         if let data = docData{
             multipartFormData.append(data, withName: "club_file", fileName: fileName, mimeType: "application/pdf")
         }

         for (key, value) in parameters {
             multipartFormData.append("\(value)".data(using: String.Encoding.utf8)!, withName: key as String)
          print("PARAMS => \(multipartFormData)")
         }

     }, to: url, method: .post, headers: headers) { (result) in
         switch result{
         case .success(let upload, _, _):
             upload.responseJSON { response in

                DispatchQueue.main.asyncAfter(deadline: .now() + 0.33){
                    self.VC_loader.dismiss(animated: false, completion: nil)
                }

                 print("Succesfully uploaded")
                 if let err = response.error{
                     onError?(err)
                     return
                 }
                 print(JSON(response.result.value as Any))
                 onCompletion?(JSON(response.result.value as Any))
             }
         case .failure(let error):
             print("Error in upload: \(error.localizedDescription)")
             onError?(error)
         }
     }
 }
// code is not working 
}

    }
    private func mimeType(for path: String) -> String {
        let pathExtension = URL(fileURLWithPath: path).pathExtension as NSString
        guard
            let uti = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, pathExtension, nil)?.takeRetainedValue(),
            let mimetype = UTTypeCopyPreferredTagWithClass(uti, kUTTagClassMIMEType)?.takeRetainedValue()
        else {
            return "application/octet-stream"
        }
        
        return mimetype as String
    }

    public func documentMenu(_ documentMenu:UIDocumentPickerViewController, didPickDocumentPicker documentPicker: UIDocumentPickerViewController) {
        documentPicker.delegate = self
        present(documentPicker, animated: true, completion: nil)
    }


    func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
        print("view was cancelled")
        dismiss(animated: true, completion: nil)
    }
    
}
